
Drive_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e88  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003f98  08003f98  00004f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fbc  08003fbc  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003fbc  08003fbc  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fbc  08003fbc  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fbc  08003fbc  00004fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fc0  08003fc0  00004fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003fc4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000010  08003fd4  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003fd4  00005148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e28  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001956  00000000  00000000  0000ee61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  000107b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083a  00000000  00000000  00011260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017830  00000000  00000000  00011a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b005  00000000  00000000  000292ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab22  00000000  00000000  000342cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bedf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ddc  00000000  00000000  000bee34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c1c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f80 	.word	0x08003f80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003f80 	.word	0x08003f80

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f000 fd28 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f83a 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 f99a 	bl	8000c80 <MX_GPIO_Init>
  MX_CAN_Init();
 800094c:	f000 f87c 	bl	8000a48 <MX_CAN_Init>
  MX_TIM4_Init();
 8000950:	f000 f942 	bl	8000bd8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000954:	f000 f8cc 	bl	8000af0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000958:	4812      	ldr	r0, [pc, #72]	@ (80009a4 <main+0x68>)
 800095a:	f000 ff41 	bl	80017e0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800095e:	2110      	movs	r1, #16
 8000960:	4810      	ldr	r0, [pc, #64]	@ (80009a4 <main+0x68>)
 8000962:	f001 f971 	bl	8001c48 <HAL_CAN_ActivateNotification>

  //start PWM mode for the motor
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000966:	210c      	movs	r1, #12
 8000968:	480f      	ldr	r0, [pc, #60]	@ (80009a8 <main+0x6c>)
 800096a:	f002 faff 	bl	8002f6c <HAL_TIM_PWM_Start>
  TIM2->CCR4=0; //set initial PWM value as zero
 800096e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000972:	2200      	movs	r2, #0
 8000974:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin,DIR); //set the initial value of DIR
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <main+0x70>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	2110      	movs	r1, #16
 800097e:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <main+0x74>)
 8000980:	f001 fe3c 	bl	80025fc <HAL_GPIO_WritePin>
  //start TIM4 in encoder mode to read the encoder pulses in 4x mode
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000984:	213c      	movs	r1, #60	@ 0x3c
 8000986:	480b      	ldr	r0, [pc, #44]	@ (80009b4 <main+0x78>)
 8000988:	f002 fc34 	bl	80031f4 <HAL_TIM_Encoder_Start>


  TxHeader.IDE=CAN_ID_STD;
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <main+0x7c>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  TxHeader.RTR=CAN_RTR_DATA;
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <main+0x7c>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  TxHeader.StdId=SLAVE_ID; // ID of this CAN node
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <main+0x7c>)
 800099a:	f240 5253 	movw	r2, #1363	@ 0x553
 800099e:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <main+0x64>
 80009a4:	2000002c 	.word	0x2000002c
 80009a8:	20000054 	.word	0x20000054
 80009ac:	20000143 	.word	0x20000143
 80009b0:	40010800 	.word	0x40010800
 80009b4:	2000009c 	.word	0x2000009c
 80009b8:	20000100 	.word	0x20000100

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b090      	sub	sp, #64	@ 0x40
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	2228      	movs	r2, #40	@ 0x28
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 fa66 	bl	8003e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f0:	2302      	movs	r3, #2
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 fe2b 	bl	8002660 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a10:	f000 fb22 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 f898 	bl	8002b64 <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a3a:	f000 fb0d 	bl	8001058 <Error_Handler>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3740      	adds	r7, #64	@ 0x40
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a50:	4a26      	ldr	r2, [pc, #152]	@ (8000aec <MX_CAN_Init+0xa4>)
 8000a52:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000a54:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a56:	2204      	movs	r2, #4
 8000a58:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a60:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000a66:	4b20      	ldr	r3, [pc, #128]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a68:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000a6c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a70:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000a74:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a82:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a88:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a9a:	4813      	ldr	r0, [pc, #76]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000a9c:	f000 fcdc 	bl	8001458 <HAL_CAN_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000aa6:	f000 fad7 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // from 0 to 13, which filter bank to use from the assigned ones
 8000aae:	230a      	movs	r3, #10
 8000ab0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1; //accept messages at FIFO1
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = MASTER_ID<<5; //accept from only master ID
 8000ab6:	f648 43a0 	movw	r3, #36000	@ 0x8ca0
 8000aba:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0b11111111111<<5;
 8000ac0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ac4:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter for single CAN MCUs
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4803      	ldr	r0, [pc, #12]	@ (8000ae8 <MX_CAN_Init+0xa0>)
 8000adc:	f000 fdb7 	bl	800164e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	@ 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000002c 	.word	0x2000002c
 8000aec:	40006400 	.word	0x40006400

08000af0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	@ 0x38
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	f107 0320 	add.w	r3, r7, #32
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b20:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000b22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18-1;
 8000b28:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000b2a:	2211      	movs	r2, #17
 8000b2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b29      	ldr	r3, [pc, #164]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 8000b34:	4b27      	ldr	r3, [pc, #156]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000b36:	22fe      	movs	r2, #254	@ 0xfe
 8000b38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3a:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b40:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b46:	4823      	ldr	r0, [pc, #140]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000b48:	f002 f968 	bl	8002e1c <HAL_TIM_Base_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b52:	f000 fa81 	bl	8001058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b60:	4619      	mov	r1, r3
 8000b62:	481c      	ldr	r0, [pc, #112]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000b64:	f002 fd86 	bl	8003674 <HAL_TIM_ConfigClockSource>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b6e:	f000 fa73 	bl	8001058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b72:	4818      	ldr	r0, [pc, #96]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000b74:	f002 f9a1 	bl	8002eba <HAL_TIM_PWM_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b7e:	f000 fa6b 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b8a:	f107 0320 	add.w	r3, r7, #32
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4810      	ldr	r0, [pc, #64]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000b92:	f003 f913 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b9c:	f000 fa5c 	bl	8001058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba0:	2360      	movs	r3, #96	@ 0x60
 8000ba2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4807      	ldr	r0, [pc, #28]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000bb8:	f002 fc9a 	bl	80034f0 <HAL_TIM_PWM_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000bc2:	f000 fa49 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bc6:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <MX_TIM2_Init+0xe4>)
 8000bc8:	f000 fb48 	bl	800125c <HAL_TIM_MspPostInit>

}
 8000bcc:	bf00      	nop
 8000bce:	3738      	adds	r7, #56	@ 0x38
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000054 	.word	0x20000054

08000bd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2224      	movs	r2, #36	@ 0x24
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 f958 	bl	8003e9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bf4:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <MX_TIM4_Init+0xa0>)
 8000bf6:	4a21      	ldr	r2, [pc, #132]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000bf8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <MX_TIM4_Init+0xa0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <MX_TIM4_Init+0xa0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3800;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <MX_TIM4_Init+0xa0>)
 8000c08:	f640 62d8 	movw	r2, #3800	@ 0xed8
 8000c0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <MX_TIM4_Init+0xa0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <MX_TIM4_Init+0xa0>)
 8000c16:	2280      	movs	r2, #128	@ 0x80
 8000c18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c22:	2301      	movs	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c32:	2301      	movs	r3, #1
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <MX_TIM4_Init+0xa0>)
 8000c46:	f002 fa33 	bl	80030b0 <HAL_TIM_Encoder_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000c50:	f000 fa02 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_TIM4_Init+0xa0>)
 8000c62:	f003 f8ab 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000c6c:	f000 f9f4 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3730      	adds	r7, #48	@ 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000009c 	.word	0x2000009c
 8000c7c:	40000800 	.word	0x40000800

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	4b2d      	ldr	r3, [pc, #180]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a2c      	ldr	r2, [pc, #176]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a26      	ldr	r2, [pc, #152]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000cb2:	f043 0320 	orr.w	r3, r3, #32
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b24      	ldr	r3, [pc, #144]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a20      	ldr	r2, [pc, #128]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <MX_GPIO_Init+0xcc>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cfa:	4815      	ldr	r0, [pc, #84]	@ (8000d50 <MX_GPIO_Init+0xd0>)
 8000cfc:	f001 fc7e 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2110      	movs	r1, #16
 8000d04:	4813      	ldr	r0, [pc, #76]	@ (8000d54 <MX_GPIO_Init+0xd4>)
 8000d06:	f001 fc79 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	480b      	ldr	r0, [pc, #44]	@ (8000d50 <MX_GPIO_Init+0xd0>)
 8000d24:	f001 fae6 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_GPIO_Init+0xd4>)
 8000d40:	f001 fad8 	bl	80022f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40011000 	.word	0x40011000
 8000d54:	40010800 	.word	0x40010800

08000d58 <HAL_CAN_RxFifo1MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	//receive message stored in the CAN FIFO1 buffer
	if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 8000d60:	4b45      	ldr	r3, [pc, #276]	@ (8000e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000d62:	4a46      	ldr	r2, [pc, #280]	@ (8000e7c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000d64:	2101      	movs	r1, #1
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f000 fe4d 	bl	8001a06 <HAL_CAN_GetRxMessage>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
		Error_Handler();
 8000d72:	f000 f971 	bl	8001058 <Error_Handler>
	}

	//check if the message is coming from master node and whether it is meant for the current slave node
	//break down the command into qualifier and address
	uint8_t command=RxData[0]>>5; //look at the first 3 bits
 8000d76:	4b40      	ldr	r3, [pc, #256]	@ (8000e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	75fb      	strb	r3, [r7, #23]
	uint8_t address=(command<<5)^RxData[0];
 8000d7e:	7dfb      	ldrb	r3, [r7, #23]
 8000d80:	015b      	lsls	r3, r3, #5
 8000d82:	b25a      	sxtb	r2, r3
 8000d84:	4b3c      	ldr	r3, [pc, #240]	@ (8000e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	4053      	eors	r3, r2
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	75bb      	strb	r3, [r7, #22]

	if (RxHeader.DLC==3 && address==SLAVE_ID-SLAVE0_ID) //polling mode will send 3 bytes of data now
 8000d90:	4b3a      	ldr	r3, [pc, #232]	@ (8000e7c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	f040 8113 	bne.w	8000fc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x268>
 8000d9a:	7dbb      	ldrb	r3, [r7, #22]
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	f040 810f 	bne.w	8000fc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x268>
	{
		if (command==polling)
 8000da2:	4b37      	ldr	r3, [pc, #220]	@ (8000e80 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	7dfa      	ldrb	r2, [r7, #23]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 8109 	bne.w	8000fc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x268>
		{
			//set PWM and direction pins
			PWM=RxData[1];
 8000dae:	4b32      	ldr	r3, [pc, #200]	@ (8000e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000db0:	785a      	ldrb	r2, [r3, #1]
 8000db2:	4b34      	ldr	r3, [pc, #208]	@ (8000e84 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000db4:	701a      	strb	r2, [r3, #0]
			DIR=RxData[2];
 8000db6:	4b30      	ldr	r3, [pc, #192]	@ (8000e78 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8000db8:	789a      	ldrb	r2, [r3, #2]
 8000dba:	4b33      	ldr	r3, [pc, #204]	@ (8000e88 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000dbc:	701a      	strb	r2, [r3, #0]
			TIM2->CCR4=PWM; //set the duty cycle as an 8 bit value that is received
 8000dbe:	4b31      	ldr	r3, [pc, #196]	@ (8000e84 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dc6:	641a      	str	r2, [r3, #64]	@ 0x40

			//set the direction pin
			HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin,DIR); //set the initial value of DIR
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e88 <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2110      	movs	r1, #16
 8000dd0:	482e      	ldr	r0, [pc, #184]	@ (8000e8c <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8000dd2:	f001 fc13 	bl	80025fc <HAL_GPIO_WritePin>

			//extract information about encoder and send to master node
			TxHeader.DLC=8; //send 8 bytes of data for encoder input
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e90 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8000dd8:	2208      	movs	r2, #8
 8000dda:	611a      	str	r2, [r3, #16]

			currentEnc=TIM4->CNT; //get the current count of encoder
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 8000dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de0:	4a2d      	ldr	r2, [pc, #180]	@ (8000e98 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8000de2:	6013      	str	r3, [r2, #0]
			if (currentEnc==previousEnc)
 8000de4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e98 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e9c <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d103      	bne.n	8000df8 <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>
				diff=0; //no change in velocity
 8000df0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea0 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	801a      	strh	r2, [r3, #0]
 8000df6:	e068      	b.n	8000eca <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
			else if (currentEnc>previousEnc)
 8000df8:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d926      	bls.n	8000e52 <HAL_CAN_RxFifo1MsgPendingCallback+0xfa>
			{
				if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) //underflow occurred
 8000e04:	4b27      	ldr	r3, [pc, #156]	@ (8000ea4 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0310 	and.w	r3, r3, #16
 8000e0e:	2b10      	cmp	r3, #16
 8000e10:	d113      	bne.n	8000e3a <HAL_CAN_RxFifo1MsgPendingCallback+0xe2>
					diff=-previousEnc-__HAL_TIM_GET_AUTORELOAD(&htim4)+currentEnc;
 8000e12:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	425b      	negs	r3, r3
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8000e36:	801a      	strh	r2, [r3, #0]
 8000e38:	e047      	b.n	8000eca <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
				else
					diff=currentEnc-previousEnc;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8000e4e:	801a      	strh	r2, [r3, #0]
 8000e50:	e03b      	b.n	8000eca <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
			}
			else
			{
				if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	2b10      	cmp	r3, #16
 8000e5e:	d123      	bne.n	8000ea8 <HAL_CAN_RxFifo1MsgPendingCallback+0x150>
					diff=currentEnc-previousEnc;
 8000e60:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <HAL_CAN_RxFifo1MsgPendingCallback+0x144>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8000e74:	801a      	strh	r2, [r3, #0]
 8000e76:	e028      	b.n	8000eca <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
 8000e78:	20000118 	.word	0x20000118
 8000e7c:	200000e4 	.word	0x200000e4
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000142 	.word	0x20000142
 8000e88:	20000143 	.word	0x20000143
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	20000100 	.word	0x20000100
 8000e94:	40000800 	.word	0x40000800
 8000e98:	20000130 	.word	0x20000130
 8000e9c:	20000134 	.word	0x20000134
 8000ea0:	20000138 	.word	0x20000138
 8000ea4:	2000009c 	.word	0x2000009c
				else //overflow occurred
					diff=currentEnc+__HAL_TIM_GET_AUTORELOAD(&htim4)-previousEnc;
 8000ea8:	4b5d      	ldr	r3, [pc, #372]	@ (8001020 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8001024 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	4b5b      	ldr	r3, [pc, #364]	@ (8001028 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	4b59      	ldr	r3, [pc, #356]	@ (800102c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 8000ec8:	801a      	strh	r2, [r3, #0]
			}
			pos+=diff;
 8000eca:	4b58      	ldr	r3, [pc, #352]	@ (800102c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 8000ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b57      	ldr	r3, [pc, #348]	@ (8001030 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a55      	ldr	r2, [pc, #340]	@ (8001030 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 8000eda:	6013      	str	r3, [r2, #0]
			previousEnc=currentEnc;
 8000edc:	4b51      	ldr	r3, [pc, #324]	@ (8001024 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a51      	ldr	r2, [pc, #324]	@ (8001028 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 8000ee2:	6013      	str	r3, [r2, #0]
			//first 4 bytes -> absolute position value
			//next 2 bytes -> angular position
			//next 2 bytes -> difference in encoder readings

			//extracting bytes for absolute encoder position
			uint8_t b0 = (pos>>24)&0xFF;
 8000ee4:	4b52      	ldr	r3, [pc, #328]	@ (8001030 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	0e1b      	lsrs	r3, r3, #24
 8000eea:	757b      	strb	r3, [r7, #21]
			uint8_t b1 = (pos>>16)&0xFF;
 8000eec:	4b50      	ldr	r3, [pc, #320]	@ (8001030 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	141b      	asrs	r3, r3, #16
 8000ef2:	753b      	strb	r3, [r7, #20]
			uint8_t b2 = (pos>>8)&0xFF;
 8000ef4:	4b4e      	ldr	r3, [pc, #312]	@ (8001030 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	121b      	asrs	r3, r3, #8
 8000efa:	74fb      	strb	r3, [r7, #19]
			uint8_t b3 = (pos)&0xFF;
 8000efc:	4b4c      	ldr	r3, [pc, #304]	@ (8001030 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	74bb      	strb	r3, [r7, #18]

			//extracting bytes for angular position
			angPos=round((3600.0*currentEnc)/MAX_COUNT);
 8000f02:	4b48      	ldr	r3, [pc, #288]	@ (8001024 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fa64 	bl	80003d4 <__aeabi_ui2d>
 8000f0c:	a340      	add	r3, pc, #256	@ (adr r3, 8001010 <HAL_CAN_RxFifo1MsgPendingCallback+0x2b8>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff fad9 	bl	80004c8 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	a33e      	add	r3, pc, #248	@ (adr r3, 8001018 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	f7ff fbfa 	bl	800071c <__aeabi_ddiv>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f002 ffe0 	bl	8003ef4 <round>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f7ff fcd6 	bl	80008ec <__aeabi_d2iz>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 8000f46:	801a      	strh	r2, [r3, #0]
			uint8_t b4 = (angPos>>8)&0xFF;
 8000f48:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 8000f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4e:	121b      	asrs	r3, r3, #8
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	747b      	strb	r3, [r7, #17]
			uint8_t b5 = (angPos)&0xFF;
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	743b      	strb	r3, [r7, #16]

			//extracting bytes for difference in encoder values
			uint8_t b6 = (diff>>8)&0XFF;
 8000f5c:	4b33      	ldr	r3, [pc, #204]	@ (800102c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 8000f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f62:	121b      	asrs	r3, r3, #8
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	73fb      	strb	r3, [r7, #15]
			uint8_t b7 = (diff)&0xFF;
 8000f68:	4b30      	ldr	r3, [pc, #192]	@ (800102c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 8000f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6e:	73bb      	strb	r3, [r7, #14]

			//preparing data for transmission
			TxData[0]=b0;
 8000f70:	4a31      	ldr	r2, [pc, #196]	@ (8001038 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8000f72:	7d7b      	ldrb	r3, [r7, #21]
 8000f74:	7013      	strb	r3, [r2, #0]
			TxData[1]=b1;
 8000f76:	4a30      	ldr	r2, [pc, #192]	@ (8001038 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8000f78:	7d3b      	ldrb	r3, [r7, #20]
 8000f7a:	7053      	strb	r3, [r2, #1]
			TxData[2]=b2;
 8000f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001038 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8000f7e:	7cfb      	ldrb	r3, [r7, #19]
 8000f80:	7093      	strb	r3, [r2, #2]
			TxData[3]=b3;
 8000f82:	4a2d      	ldr	r2, [pc, #180]	@ (8001038 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8000f84:	7cbb      	ldrb	r3, [r7, #18]
 8000f86:	70d3      	strb	r3, [r2, #3]
			TxData[4]=b4;
 8000f88:	4a2b      	ldr	r2, [pc, #172]	@ (8001038 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8000f8a:	7c7b      	ldrb	r3, [r7, #17]
 8000f8c:	7113      	strb	r3, [r2, #4]
			TxData[5]=b5;
 8000f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8001038 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8000f90:	7c3b      	ldrb	r3, [r7, #16]
 8000f92:	7153      	strb	r3, [r2, #5]
			TxData[6]=b6;
 8000f94:	4a28      	ldr	r2, [pc, #160]	@ (8001038 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	7193      	strb	r3, [r2, #6]
			TxData[7]=b7;
 8000f9a:	4a27      	ldr	r2, [pc, #156]	@ (8001038 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	71d3      	strb	r3, [r2, #7]

			//send the CAN message
			if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000fa0:	4b26      	ldr	r3, [pc, #152]	@ (800103c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 8000fa2:	4a25      	ldr	r2, [pc, #148]	@ (8001038 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8000fa4:	4926      	ldr	r1, [pc, #152]	@ (8001040 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000fa6:	4827      	ldr	r0, [pc, #156]	@ (8001044 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000fa8:	f000 fc5e 	bl	8001868 <HAL_CAN_AddTxMessage>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_CAN_RxFifo1MsgPendingCallback+0x25e>
			{
				Error_Handler ();
 8000fb2:	f000 f851 	bl	8001058 <Error_Handler>
			}

			//toggle GPIO pin to indicate continuous message transmission
			//use this option for debugging
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fba:	4823      	ldr	r0, [pc, #140]	@ (8001048 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 8000fbc:	f001 fb36 	bl	800262c <HAL_GPIO_TogglePin>
		}
	}

	if (RxHeader.DLC==1 && address==SLAVE_ID-SLAVE0_ID)
 8000fc0:	4b22      	ldr	r3, [pc, #136]	@ (800104c <HAL_CAN_RxFifo1MsgPendingCallback+0x2f4>)
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d11e      	bne.n	8001006 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ae>
 8000fc8:	7dbb      	ldrb	r3, [r7, #22]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d11b      	bne.n	8001006 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ae>
	{
		//perform the systems check of CAN nodes
		if (command==sysCheck)
 8000fce:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f8>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	7dfa      	ldrb	r2, [r7, #23]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d116      	bne.n	8001006 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ae>
		{
			TxHeader.DLC=1; //send 1 byte of data as a systems check
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	611a      	str	r2, [r3, #16]
			TxData[0]=RxData[0];
 8000fde:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8000fe4:	701a      	strb	r2, [r3, #0]
			//transmit the received message back to master CAN node
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fe6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fea:	4817      	ldr	r0, [pc, #92]	@ (8001048 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 8000fec:	f001 fb1e 	bl	800262c <HAL_GPIO_TogglePin>
			if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 8000ff2:	4a11      	ldr	r2, [pc, #68]	@ (8001038 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8000ff4:	4912      	ldr	r1, [pc, #72]	@ (8001040 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 8000ff6:	4813      	ldr	r0, [pc, #76]	@ (8001044 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8000ff8:	f000 fc36 	bl	8001868 <HAL_CAN_AddTxMessage>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ae>
			{
				Error_Handler ();
 8001002:	f000 f829 	bl	8001058 <Error_Handler>
			}
		}

	}
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	00000000 	.word	0x00000000
 8001014:	40ac2000 	.word	0x40ac2000
 8001018:	00000000 	.word	0x00000000
 800101c:	40adb000 	.word	0x40adb000
 8001020:	2000009c 	.word	0x2000009c
 8001024:	20000130 	.word	0x20000130
 8001028:	20000134 	.word	0x20000134
 800102c:	20000138 	.word	0x20000138
 8001030:	2000013c 	.word	0x2000013c
 8001034:	20000140 	.word	0x20000140
 8001038:	20000120 	.word	0x20000120
 800103c:	20000128 	.word	0x20000128
 8001040:	20000100 	.word	0x20000100
 8001044:	2000002c 	.word	0x2000002c
 8001048:	40011000 	.word	0x40011000
 800104c:	200000e4 	.word	0x200000e4
 8001050:	2000012c 	.word	0x2000012c
 8001054:	20000118 	.word	0x20000118

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <Error_Handler+0x8>

08001064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <HAL_MspInit+0x5c>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a14      	ldr	r2, [pc, #80]	@ (80010c0 <HAL_MspInit+0x5c>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6193      	str	r3, [r2, #24]
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_MspInit+0x5c>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <HAL_MspInit+0x5c>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a0e      	ldr	r2, [pc, #56]	@ (80010c0 <HAL_MspInit+0x5c>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <HAL_MspInit+0x5c>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_MspInit+0x60>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <HAL_MspInit+0x60>)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010000 	.word	0x40010000

080010c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	@ 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a29      	ldr	r2, [pc, #164]	@ (8001188 <HAL_CAN_MspInit+0xc0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d14b      	bne.n	8001180 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010e8:	4b28      	ldr	r3, [pc, #160]	@ (800118c <HAL_CAN_MspInit+0xc4>)
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	4a27      	ldr	r2, [pc, #156]	@ (800118c <HAL_CAN_MspInit+0xc4>)
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010f2:	61d3      	str	r3, [r2, #28]
 80010f4:	4b25      	ldr	r3, [pc, #148]	@ (800118c <HAL_CAN_MspInit+0xc4>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <HAL_CAN_MspInit+0xc4>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a21      	ldr	r2, [pc, #132]	@ (800118c <HAL_CAN_MspInit+0xc4>)
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <HAL_CAN_MspInit+0xc4>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001118:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4818      	ldr	r0, [pc, #96]	@ (8001190 <HAL_CAN_MspInit+0xc8>)
 800112e:	f001 f8e1 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001132:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4812      	ldr	r0, [pc, #72]	@ (8001190 <HAL_CAN_MspInit+0xc8>)
 8001148:	f001 f8d4 	bl	80022f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_CAN_MspInit+0xcc>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
 8001162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <HAL_CAN_MspInit+0xcc>)
 800116c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2015      	movs	r0, #21
 8001176:	f001 f886 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800117a:	2015      	movs	r0, #21
 800117c:	f001 f89f 	bl	80022be <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	@ 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40006400 	.word	0x40006400
 800118c:	40021000 	.word	0x40021000
 8001190:	40010c00 	.word	0x40010c00
 8001194:	40010000 	.word	0x40010000

08001198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011a8:	d10b      	bne.n	80011c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <HAL_TIM_Base_MspInit+0x34>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <HAL_TIM_Base_MspInit+0x34>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_TIM_Base_MspInit+0x34>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a19      	ldr	r2, [pc, #100]	@ (8001250 <HAL_TIM_Encoder_MspInit+0x80>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d12b      	bne.n	8001248 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_TIM_Encoder_MspInit+0x84>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <HAL_TIM_Encoder_MspInit+0x84>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	61d3      	str	r3, [r2, #28]
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_TIM_Encoder_MspInit+0x84>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <HAL_TIM_Encoder_MspInit+0x84>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a11      	ldr	r2, [pc, #68]	@ (8001254 <HAL_TIM_Encoder_MspInit+0x84>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <HAL_TIM_Encoder_MspInit+0x84>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001220:	23c0      	movs	r3, #192	@ 0xc0
 8001222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	4809      	ldr	r0, [pc, #36]	@ (8001258 <HAL_TIM_Encoder_MspInit+0x88>)
 8001234:	f001 f85e 	bl	80022f4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	201e      	movs	r0, #30
 800123e:	f001 f822 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001242:	201e      	movs	r0, #30
 8001244:	f001 f83b 	bl	80022be <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40000800 	.word	0x40000800
 8001254:	40021000 	.word	0x40021000
 8001258:	40010c00 	.word	0x40010c00

0800125c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800127a:	d117      	bne.n	80012ac <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <HAL_TIM_MspPostInit+0x58>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a0c      	ldr	r2, [pc, #48]	@ (80012b4 <HAL_TIM_MspPostInit+0x58>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_TIM_MspPostInit+0x58>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001294:	2308      	movs	r3, #8
 8001296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2302      	movs	r3, #2
 800129e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4619      	mov	r1, r3
 80012a6:	4804      	ldr	r0, [pc, #16]	@ (80012b8 <HAL_TIM_MspPostInit+0x5c>)
 80012a8:	f001 f824 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010800 	.word	0x40010800

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130c:	f000 f888 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <CAN1_RX1_IRQHandler+0x10>)
 800131a:	f000 fcba 	bl	8001c92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000002c 	.word	0x2000002c

08001328 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <TIM4_IRQHandler+0x10>)
 800132e:	f001 ffef 	bl	8003310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000009c 	.word	0x2000009c

0800133c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001348:	f7ff fff8 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800134e:	490c      	ldr	r1, [pc, #48]	@ (8001380 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001364:	4c09      	ldr	r4, [pc, #36]	@ (800138c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f002 fd9b 	bl	8003eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001376:	f7ff fae1 	bl	800093c <main>
  bx lr
 800137a:	4770      	bx	lr
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001384:	08003fc4 	.word	0x08003fc4
  ldr r2, =_sbss
 8001388:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800138c:	20000148 	.word	0x20000148

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_Init+0x28>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	@ (80013bc <HAL_Init+0x28>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 ff63 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	200f      	movs	r0, #15
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fe58 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 ff7b 	bl	80022da <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 ff43 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	@ (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000004 	.word	0x20000004
 8001418:	2000000c 	.word	0x2000000c
 800141c:	20000008 	.word	0x20000008

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x1c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_IncTick+0x20>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a03      	ldr	r2, [pc, #12]	@ (8001440 <HAL_IncTick+0x20>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	2000000c 	.word	0x2000000c
 8001440:	20000144 	.word	0x20000144

08001444 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b02      	ldr	r3, [pc, #8]	@ (8001454 <HAL_GetTick+0x10>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000144 	.word	0x20000144

08001458 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0ed      	b.n	8001646 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fe26 	bl	80010c8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800148c:	f7ff ffda 	bl	8001444 <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001492:	e012      	b.n	80014ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001494:	f7ff ffd6 	bl	8001444 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b0a      	cmp	r3, #10
 80014a0:	d90b      	bls.n	80014ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2205      	movs	r2, #5
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0c5      	b.n	8001646 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0e5      	beq.n	8001494 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0202 	bic.w	r2, r2, #2
 80014d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d8:	f7ff ffb4 	bl	8001444 <HAL_GetTick>
 80014dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014de:	e012      	b.n	8001506 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014e0:	f7ff ffb0 	bl	8001444 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b0a      	cmp	r3, #10
 80014ec:	d90b      	bls.n	8001506 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2205      	movs	r2, #5
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e09f      	b.n	8001646 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e5      	bne.n	80014e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7e1b      	ldrb	r3, [r3, #24]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d108      	bne.n	800152e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e007      	b.n	800153e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7e5b      	ldrb	r3, [r3, #25]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d108      	bne.n	8001558 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e007      	b.n	8001568 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001566:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7e9b      	ldrb	r3, [r3, #26]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d108      	bne.n	8001582 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0220 	orr.w	r2, r2, #32
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e007      	b.n	8001592 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0220 	bic.w	r2, r2, #32
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7edb      	ldrb	r3, [r3, #27]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d108      	bne.n	80015ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0210 	bic.w	r2, r2, #16
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e007      	b.n	80015bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0210 	orr.w	r2, r2, #16
 80015ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7f1b      	ldrb	r3, [r3, #28]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d108      	bne.n	80015d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0208 	orr.w	r2, r2, #8
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e007      	b.n	80015e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0208 	bic.w	r2, r2, #8
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7f5b      	ldrb	r3, [r3, #29]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0204 	orr.w	r2, r2, #4
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e007      	b.n	8001610 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0204 	bic.w	r2, r2, #4
 800160e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	ea42 0103 	orr.w	r1, r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	1e5a      	subs	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800164e:	b480      	push	{r7}
 8001650:	b087      	sub	sp, #28
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001666:	7cfb      	ldrb	r3, [r7, #19]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d003      	beq.n	8001674 <HAL_CAN_ConfigFilter+0x26>
 800166c:	7cfb      	ldrb	r3, [r7, #19]
 800166e:	2b02      	cmp	r3, #2
 8001670:	f040 80aa 	bne.w	80017c8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800167a:	f043 0201 	orr.w	r2, r3, #1
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	2201      	movs	r2, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d123      	bne.n	80016f6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	401a      	ands	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3248      	adds	r2, #72	@ 0x48
 80016d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ec:	6979      	ldr	r1, [r7, #20]
 80016ee:	3348      	adds	r3, #72	@ 0x48
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	440b      	add	r3, r1
 80016f4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d122      	bne.n	8001744 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	431a      	orrs	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800171e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	3248      	adds	r2, #72	@ 0x48
 8001724:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001738:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800173a:	6979      	ldr	r1, [r7, #20]
 800173c:	3348      	adds	r3, #72	@ 0x48
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800175e:	e007      	b.n	8001770 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	431a      	orrs	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d109      	bne.n	800178c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43db      	mvns	r3, r3
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800178a:	e007      	b.n	800179c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	431a      	orrs	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017ba:	f023 0201 	bic.w	r2, r3, #1
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e006      	b.n	80017d6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
  }
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d12e      	bne.n	8001852 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800180c:	f7ff fe1a 	bl	8001444 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001812:	e012      	b.n	800183a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001814:	f7ff fe16 	bl	8001444 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b0a      	cmp	r3, #10
 8001820:	d90b      	bls.n	800183a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2205      	movs	r2, #5
 8001832:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e012      	b.n	8001860 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1e5      	bne.n	8001814 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e006      	b.n	8001860 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
  }
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d003      	beq.n	8001894 <HAL_CAN_AddTxMessage+0x2c>
 800188c:	7ffb      	ldrb	r3, [r7, #31]
 800188e:	2b02      	cmp	r3, #2
 8001890:	f040 80ad 	bne.w	80019ee <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10a      	bne.n	80018b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8095 	beq.w	80019de <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	0e1b      	lsrs	r3, r3, #24
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018be:	2201      	movs	r2, #1
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10d      	bne.n	80018ec <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018da:	68f9      	ldr	r1, [r7, #12]
 80018dc:	6809      	ldr	r1, [r1, #0]
 80018de:	431a      	orrs	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3318      	adds	r3, #24
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	440b      	add	r3, r1
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e00f      	b.n	800190c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018f6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001900:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3318      	adds	r3, #24
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	440b      	add	r3, r1
 800190a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6819      	ldr	r1, [r3, #0]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3318      	adds	r3, #24
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	440b      	add	r3, r1
 800191c:	3304      	adds	r3, #4
 800191e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	7d1b      	ldrb	r3, [r3, #20]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d111      	bne.n	800194c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3318      	adds	r3, #24
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	4413      	add	r3, r2
 8001934:	3304      	adds	r3, #4
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	6811      	ldr	r1, [r2, #0]
 800193c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3318      	adds	r3, #24
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	440b      	add	r3, r1
 8001948:	3304      	adds	r3, #4
 800194a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3307      	adds	r3, #7
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	061a      	lsls	r2, r3, #24
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3306      	adds	r3, #6
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3305      	adds	r3, #5
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	4313      	orrs	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	3204      	adds	r2, #4
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	4610      	mov	r0, r2
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	6811      	ldr	r1, [r2, #0]
 8001974:	ea43 0200 	orr.w	r2, r3, r0
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	440b      	add	r3, r1
 800197e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001982:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3303      	adds	r3, #3
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	061a      	lsls	r2, r3, #24
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3302      	adds	r3, #2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	041b      	lsls	r3, r3, #16
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3301      	adds	r3, #1
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	4313      	orrs	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	4610      	mov	r0, r2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	6811      	ldr	r1, [r2, #0]
 80019aa:	ea43 0200 	orr.w	r2, r3, r0
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	440b      	add	r3, r1
 80019b4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80019b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3318      	adds	r3, #24
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	6811      	ldr	r1, [r2, #0]
 80019cc:	f043 0201 	orr.w	r2, r3, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3318      	adds	r3, #24
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	440b      	add	r3, r1
 80019d8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e00e      	b.n	80019fc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e006      	b.n	80019fc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
  }
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3724      	adds	r7, #36	@ 0x24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr

08001a06 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a06:	b480      	push	{r7}
 8001a08:	b087      	sub	sp, #28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a1a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d003      	beq.n	8001a2a <HAL_CAN_GetRxMessage+0x24>
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	f040 8103 	bne.w	8001c30 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10e      	bne.n	8001a4e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d116      	bne.n	8001a6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0f7      	b.n	8001c3e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0e8      	b.n	8001c3e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	331b      	adds	r3, #27
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	4413      	add	r3, r2
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0204 	and.w	r2, r3, #4
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10c      	bne.n	8001aa4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	331b      	adds	r3, #27
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	4413      	add	r3, r2
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0d5b      	lsrs	r3, r3, #21
 8001a9a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e00b      	b.n	8001abc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	331b      	adds	r3, #27
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	08db      	lsrs	r3, r3, #3
 8001ab4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	331b      	adds	r3, #27
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	4413      	add	r3, r2
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0202 	and.w	r2, r3, #2
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	331b      	adds	r3, #27
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	4413      	add	r3, r2
 8001ade:	3304      	adds	r3, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2208      	movs	r2, #8
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	e00b      	b.n	8001b0a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	331b      	adds	r3, #27
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	3304      	adds	r3, #4
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 020f 	and.w	r2, r3, #15
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	331b      	adds	r3, #27
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4413      	add	r3, r2
 8001b16:	3304      	adds	r3, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	0a1b      	lsrs	r3, r3, #8
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	331b      	adds	r3, #27
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3304      	adds	r3, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0c1b      	lsrs	r3, r3, #16
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0a1a      	lsrs	r2, r3, #8
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	4413      	add	r3, r2
 8001b74:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	0c1a      	lsrs	r2, r3, #16
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0e1a      	lsrs	r2, r3, #24
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3303      	adds	r3, #3
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	0a1a      	lsrs	r2, r3, #8
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	3305      	adds	r3, #5
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	4413      	add	r3, r2
 8001bda:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0c1a      	lsrs	r2, r3, #16
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	3306      	adds	r3, #6
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	0e1a      	lsrs	r2, r3, #24
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3307      	adds	r3, #7
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d108      	bne.n	8001c1c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0220 	orr.w	r2, r2, #32
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	e007      	b.n	8001c2c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0220 	orr.w	r2, r2, #32
 8001c2a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e006      	b.n	8001c3e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c34:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
  }
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	371c      	adds	r7, #28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c58:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d002      	beq.n	8001c66 <HAL_CAN_ActivateNotification+0x1e>
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d109      	bne.n	8001c7a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6959      	ldr	r1, [r3, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e006      	b.n	8001c88 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
  }
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b08a      	sub	sp, #40	@ 0x28
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d07c      	beq.n	8001dd2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d023      	beq.n	8001d2a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f983 	bl	8002000 <HAL_CAN_TxMailbox0CompleteCallback>
 8001cfa:	e016      	b.n	8001d2a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0e:	e00c      	b.n	8001d2a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d22:	e002      	b.n	8001d2a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f986 	bl	8002036 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d024      	beq.n	8001d7e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f962 	bl	8002012 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d4e:	e016      	b.n	8001d7e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d62:	e00c      	b.n	8001d7e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d76:	e002      	b.n	8001d7e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f965 	bl	8002048 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d024      	beq.n	8001dd2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f941 	bl	8002024 <HAL_CAN_TxMailbox2CompleteCallback>
 8001da2:	e016      	b.n	8001dd2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db6:	e00c      	b.n	8001dd2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d004      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dca:	e002      	b.n	8001dd2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f944 	bl	800205a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00c      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2210      	movs	r2, #16
 8001df4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00b      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2208      	movs	r2, #8
 8001e10:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f933 	bl	800207e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f91b 	bl	800206c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00c      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2210      	movs	r2, #16
 8001e58:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00b      	beq.n	8001e7c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2208      	movs	r2, #8
 8001e74:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f90a 	bl	8002090 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d009      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7fe ff5f 	bl	8000d58 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2210      	movs	r2, #16
 8001eb4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8f3 	bl	80020a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f8eb 	bl	80020b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d07b      	beq.n	8001fe0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d072      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d043      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d03e      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f60:	2b60      	cmp	r3, #96	@ 0x60
 8001f62:	d02b      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x32a>
 8001f64:	2b60      	cmp	r3, #96	@ 0x60
 8001f66:	d82e      	bhi.n	8001fc6 <HAL_CAN_IRQHandler+0x334>
 8001f68:	2b50      	cmp	r3, #80	@ 0x50
 8001f6a:	d022      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x320>
 8001f6c:	2b50      	cmp	r3, #80	@ 0x50
 8001f6e:	d82a      	bhi.n	8001fc6 <HAL_CAN_IRQHandler+0x334>
 8001f70:	2b40      	cmp	r3, #64	@ 0x40
 8001f72:	d019      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x316>
 8001f74:	2b40      	cmp	r3, #64	@ 0x40
 8001f76:	d826      	bhi.n	8001fc6 <HAL_CAN_IRQHandler+0x334>
 8001f78:	2b30      	cmp	r3, #48	@ 0x30
 8001f7a:	d010      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x30c>
 8001f7c:	2b30      	cmp	r3, #48	@ 0x30
 8001f7e:	d822      	bhi.n	8001fc6 <HAL_CAN_IRQHandler+0x334>
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d002      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x2f8>
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d005      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f88:	e01d      	b.n	8001fc6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f92:	e019      	b.n	8001fc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	f043 0310 	orr.w	r3, r3, #16
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f9c:	e014      	b.n	8001fc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	f043 0320 	orr.w	r3, r3, #32
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fa6:	e00f      	b.n	8001fc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fb0:	e00a      	b.n	8001fc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fba:	e005      	b.n	8001fc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fc4:	e000      	b.n	8001fc8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001fc6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001fd6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2204      	movs	r2, #4
 8001fde:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d008      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f867 	bl	80020c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	@ 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4906      	ldr	r1, [pc, #24]	@ (8002170 <__NVIC_EnableIRQ+0x34>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	@ (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	@ (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	@ 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	@ 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff90 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	@ (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff2d 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff42 	bl	8002120 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff90 	bl	80021c8 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5f 	bl	8002174 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff35 	bl	800213c <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffa2 	bl	800222c <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b08b      	sub	sp, #44	@ 0x2c
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002306:	e169      	b.n	80025dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002308:	2201      	movs	r2, #1
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	429a      	cmp	r2, r3
 8002322:	f040 8158 	bne.w	80025d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4a9a      	ldr	r2, [pc, #616]	@ (8002594 <HAL_GPIO_Init+0x2a0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d05e      	beq.n	80023ee <HAL_GPIO_Init+0xfa>
 8002330:	4a98      	ldr	r2, [pc, #608]	@ (8002594 <HAL_GPIO_Init+0x2a0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d875      	bhi.n	8002422 <HAL_GPIO_Init+0x12e>
 8002336:	4a98      	ldr	r2, [pc, #608]	@ (8002598 <HAL_GPIO_Init+0x2a4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d058      	beq.n	80023ee <HAL_GPIO_Init+0xfa>
 800233c:	4a96      	ldr	r2, [pc, #600]	@ (8002598 <HAL_GPIO_Init+0x2a4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d86f      	bhi.n	8002422 <HAL_GPIO_Init+0x12e>
 8002342:	4a96      	ldr	r2, [pc, #600]	@ (800259c <HAL_GPIO_Init+0x2a8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d052      	beq.n	80023ee <HAL_GPIO_Init+0xfa>
 8002348:	4a94      	ldr	r2, [pc, #592]	@ (800259c <HAL_GPIO_Init+0x2a8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d869      	bhi.n	8002422 <HAL_GPIO_Init+0x12e>
 800234e:	4a94      	ldr	r2, [pc, #592]	@ (80025a0 <HAL_GPIO_Init+0x2ac>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d04c      	beq.n	80023ee <HAL_GPIO_Init+0xfa>
 8002354:	4a92      	ldr	r2, [pc, #584]	@ (80025a0 <HAL_GPIO_Init+0x2ac>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d863      	bhi.n	8002422 <HAL_GPIO_Init+0x12e>
 800235a:	4a92      	ldr	r2, [pc, #584]	@ (80025a4 <HAL_GPIO_Init+0x2b0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d046      	beq.n	80023ee <HAL_GPIO_Init+0xfa>
 8002360:	4a90      	ldr	r2, [pc, #576]	@ (80025a4 <HAL_GPIO_Init+0x2b0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d85d      	bhi.n	8002422 <HAL_GPIO_Init+0x12e>
 8002366:	2b12      	cmp	r3, #18
 8002368:	d82a      	bhi.n	80023c0 <HAL_GPIO_Init+0xcc>
 800236a:	2b12      	cmp	r3, #18
 800236c:	d859      	bhi.n	8002422 <HAL_GPIO_Init+0x12e>
 800236e:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <HAL_GPIO_Init+0x80>)
 8002370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002374:	080023ef 	.word	0x080023ef
 8002378:	080023c9 	.word	0x080023c9
 800237c:	080023db 	.word	0x080023db
 8002380:	0800241d 	.word	0x0800241d
 8002384:	08002423 	.word	0x08002423
 8002388:	08002423 	.word	0x08002423
 800238c:	08002423 	.word	0x08002423
 8002390:	08002423 	.word	0x08002423
 8002394:	08002423 	.word	0x08002423
 8002398:	08002423 	.word	0x08002423
 800239c:	08002423 	.word	0x08002423
 80023a0:	08002423 	.word	0x08002423
 80023a4:	08002423 	.word	0x08002423
 80023a8:	08002423 	.word	0x08002423
 80023ac:	08002423 	.word	0x08002423
 80023b0:	08002423 	.word	0x08002423
 80023b4:	08002423 	.word	0x08002423
 80023b8:	080023d1 	.word	0x080023d1
 80023bc:	080023e5 	.word	0x080023e5
 80023c0:	4a79      	ldr	r2, [pc, #484]	@ (80025a8 <HAL_GPIO_Init+0x2b4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023c6:	e02c      	b.n	8002422 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	623b      	str	r3, [r7, #32]
          break;
 80023ce:	e029      	b.n	8002424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	3304      	adds	r3, #4
 80023d6:	623b      	str	r3, [r7, #32]
          break;
 80023d8:	e024      	b.n	8002424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	3308      	adds	r3, #8
 80023e0:	623b      	str	r3, [r7, #32]
          break;
 80023e2:	e01f      	b.n	8002424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	330c      	adds	r3, #12
 80023ea:	623b      	str	r3, [r7, #32]
          break;
 80023ec:	e01a      	b.n	8002424 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023f6:	2304      	movs	r3, #4
 80023f8:	623b      	str	r3, [r7, #32]
          break;
 80023fa:	e013      	b.n	8002424 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d105      	bne.n	8002410 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002404:	2308      	movs	r3, #8
 8002406:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	611a      	str	r2, [r3, #16]
          break;
 800240e:	e009      	b.n	8002424 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002410:	2308      	movs	r3, #8
 8002412:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	615a      	str	r2, [r3, #20]
          break;
 800241a:	e003      	b.n	8002424 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
          break;
 8002420:	e000      	b.n	8002424 <HAL_GPIO_Init+0x130>
          break;
 8002422:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2bff      	cmp	r3, #255	@ 0xff
 8002428:	d801      	bhi.n	800242e <HAL_GPIO_Init+0x13a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	e001      	b.n	8002432 <HAL_GPIO_Init+0x13e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2bff      	cmp	r3, #255	@ 0xff
 8002438:	d802      	bhi.n	8002440 <HAL_GPIO_Init+0x14c>
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	e002      	b.n	8002446 <HAL_GPIO_Init+0x152>
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	3b08      	subs	r3, #8
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	210f      	movs	r1, #15
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	401a      	ands	r2, r3
 8002458:	6a39      	ldr	r1, [r7, #32]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	431a      	orrs	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80b1 	beq.w	80025d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002474:	4b4d      	ldr	r3, [pc, #308]	@ (80025ac <HAL_GPIO_Init+0x2b8>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a4c      	ldr	r2, [pc, #304]	@ (80025ac <HAL_GPIO_Init+0x2b8>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b4a      	ldr	r3, [pc, #296]	@ (80025ac <HAL_GPIO_Init+0x2b8>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800248c:	4a48      	ldr	r2, [pc, #288]	@ (80025b0 <HAL_GPIO_Init+0x2bc>)
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	3302      	adds	r3, #2
 8002494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002498:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4013      	ands	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a40      	ldr	r2, [pc, #256]	@ (80025b4 <HAL_GPIO_Init+0x2c0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_GPIO_Init+0x1ec>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a3f      	ldr	r2, [pc, #252]	@ (80025b8 <HAL_GPIO_Init+0x2c4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00d      	beq.n	80024dc <HAL_GPIO_Init+0x1e8>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a3e      	ldr	r2, [pc, #248]	@ (80025bc <HAL_GPIO_Init+0x2c8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d007      	beq.n	80024d8 <HAL_GPIO_Init+0x1e4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a3d      	ldr	r2, [pc, #244]	@ (80025c0 <HAL_GPIO_Init+0x2cc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d101      	bne.n	80024d4 <HAL_GPIO_Init+0x1e0>
 80024d0:	2303      	movs	r3, #3
 80024d2:	e006      	b.n	80024e2 <HAL_GPIO_Init+0x1ee>
 80024d4:	2304      	movs	r3, #4
 80024d6:	e004      	b.n	80024e2 <HAL_GPIO_Init+0x1ee>
 80024d8:	2302      	movs	r3, #2
 80024da:	e002      	b.n	80024e2 <HAL_GPIO_Init+0x1ee>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_GPIO_Init+0x1ee>
 80024e0:	2300      	movs	r3, #0
 80024e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e4:	f002 0203 	and.w	r2, r2, #3
 80024e8:	0092      	lsls	r2, r2, #2
 80024ea:	4093      	lsls	r3, r2
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024f2:	492f      	ldr	r1, [pc, #188]	@ (80025b0 <HAL_GPIO_Init+0x2bc>)
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800250c:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	492c      	ldr	r1, [pc, #176]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	608b      	str	r3, [r1, #8]
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800251a:	4b2a      	ldr	r3, [pc, #168]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	43db      	mvns	r3, r3
 8002522:	4928      	ldr	r1, [pc, #160]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 8002524:	4013      	ands	r3, r2
 8002526:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002534:	4b23      	ldr	r3, [pc, #140]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4922      	ldr	r1, [pc, #136]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
 8002540:	e006      	b.n	8002550 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002542:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	43db      	mvns	r3, r3
 800254a:	491e      	ldr	r1, [pc, #120]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 800254c:	4013      	ands	r3, r2
 800254e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800255c:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4918      	ldr	r1, [pc, #96]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800256a:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	4914      	ldr	r1, [pc, #80]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 8002574:	4013      	ands	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d021      	beq.n	80025c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002584:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	490e      	ldr	r1, [pc, #56]	@ (80025c4 <HAL_GPIO_Init+0x2d0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e021      	b.n	80025d6 <HAL_GPIO_Init+0x2e2>
 8002592:	bf00      	nop
 8002594:	10320000 	.word	0x10320000
 8002598:	10310000 	.word	0x10310000
 800259c:	10220000 	.word	0x10220000
 80025a0:	10210000 	.word	0x10210000
 80025a4:	10120000 	.word	0x10120000
 80025a8:	10110000 	.word	0x10110000
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40010000 	.word	0x40010000
 80025b4:	40010800 	.word	0x40010800
 80025b8:	40010c00 	.word	0x40010c00
 80025bc:	40011000 	.word	0x40011000
 80025c0:	40011400 	.word	0x40011400
 80025c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_GPIO_Init+0x304>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	4909      	ldr	r1, [pc, #36]	@ (80025f8 <HAL_GPIO_Init+0x304>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	3301      	adds	r3, #1
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f47f ae8e 	bne.w	8002308 <HAL_GPIO_Init+0x14>
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	372c      	adds	r7, #44	@ 0x2c
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	40010400 	.word	0x40010400

080025fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]
 8002608:	4613      	mov	r3, r2
 800260a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800260c:	787b      	ldrb	r3, [r7, #1]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002612:	887a      	ldrh	r2, [r7, #2]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002618:	e003      	b.n	8002622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800261a:	887b      	ldrh	r3, [r7, #2]
 800261c:	041a      	lsls	r2, r3, #16
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	611a      	str	r2, [r3, #16]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	041a      	lsls	r2, r3, #16
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43d9      	mvns	r1, r3
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	400b      	ands	r3, r1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	611a      	str	r2, [r3, #16]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
	...

08002660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e272      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8087 	beq.w	800278e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002680:	4b92      	ldr	r3, [pc, #584]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b04      	cmp	r3, #4
 800268a:	d00c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800268c:	4b8f      	ldr	r3, [pc, #572]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d112      	bne.n	80026be <HAL_RCC_OscConfig+0x5e>
 8002698:	4b8c      	ldr	r3, [pc, #560]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a4:	d10b      	bne.n	80026be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a6:	4b89      	ldr	r3, [pc, #548]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d06c      	beq.n	800278c <HAL_RCC_OscConfig+0x12c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d168      	bne.n	800278c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e24c      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x76>
 80026c8:	4b80      	ldr	r3, [pc, #512]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a7f      	ldr	r2, [pc, #508]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e02e      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x98>
 80026de:	4b7b      	ldr	r3, [pc, #492]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7a      	ldr	r2, [pc, #488]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b78      	ldr	r3, [pc, #480]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a77      	ldr	r2, [pc, #476]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0xbc>
 8002702:	4b72      	ldr	r3, [pc, #456]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a71      	ldr	r2, [pc, #452]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b6f      	ldr	r3, [pc, #444]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6e      	ldr	r2, [pc, #440]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 800271c:	4b6b      	ldr	r3, [pc, #428]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6a      	ldr	r2, [pc, #424]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b68      	ldr	r3, [pc, #416]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a67      	ldr	r2, [pc, #412]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002732:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe fe82 	bl	8001444 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fe7e 	bl	8001444 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e200      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b5d      	ldr	r3, [pc, #372]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xe4>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe fe6e 	bl	8001444 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe fe6a 	bl	8001444 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	@ 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1ec      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	4b53      	ldr	r3, [pc, #332]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x10c>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800279a:	4b4c      	ldr	r3, [pc, #304]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027a6:	4b49      	ldr	r3, [pc, #292]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x18c>
 80027b2:	4b46      	ldr	r3, [pc, #280]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b43      	ldr	r3, [pc, #268]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x176>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1c0      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b3d      	ldr	r3, [pc, #244]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4939      	ldr	r1, [pc, #228]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b36      	ldr	r3, [pc, #216]	@ (80028d0 <HAL_RCC_OscConfig+0x270>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fe fe23 	bl	8001444 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe fe1f 	bl	8001444 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1a1      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b2d      	ldr	r3, [pc, #180]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b2a      	ldr	r3, [pc, #168]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4927      	ldr	r1, [pc, #156]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <HAL_RCC_OscConfig+0x270>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fe02 	bl	8001444 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7fe fdfe 	bl	8001444 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e180      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d03a      	beq.n	80028e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d019      	beq.n	80028aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b17      	ldr	r3, [pc, #92]	@ (80028d4 <HAL_RCC_OscConfig+0x274>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7fe fde2 	bl	8001444 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe fdde 	bl	8001444 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e160      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f000 fa9c 	bl	8002de0 <RCC_Delay>
 80028a8:	e01c      	b.n	80028e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <HAL_RCC_OscConfig+0x274>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7fe fdc8 	bl	8001444 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b6:	e00f      	b.n	80028d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7fe fdc4 	bl	8001444 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d908      	bls.n	80028d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e146      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	42420000 	.word	0x42420000
 80028d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b92      	ldr	r3, [pc, #584]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e9      	bne.n	80028b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a6 	beq.w	8002a3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b88      	ldr	r3, [pc, #544]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4a87      	ldr	r2, [pc, #540]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290c:	61d3      	str	r3, [r2, #28]
 800290e:	4b85      	ldr	r3, [pc, #532]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b82      	ldr	r3, [pc, #520]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d118      	bne.n	800295c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7fe fd85 	bl	8001444 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7fe fd81 	bl	8001444 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	@ 0x64
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e103      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	4b75      	ldr	r3, [pc, #468]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x312>
 8002964:	4b6f      	ldr	r3, [pc, #444]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a6e      	ldr	r2, [pc, #440]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	e02d      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x334>
 800297a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a69      	ldr	r2, [pc, #420]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4b67      	ldr	r3, [pc, #412]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4a66      	ldr	r2, [pc, #408]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	6213      	str	r3, [r2, #32]
 8002992:	e01c      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d10c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x356>
 800299c:	4b61      	ldr	r3, [pc, #388]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4a60      	ldr	r2, [pc, #384]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6213      	str	r3, [r2, #32]
 80029a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6213      	str	r3, [r2, #32]
 80029b4:	e00b      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 80029b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	6213      	str	r3, [r2, #32]
 80029c2:	4b58      	ldr	r3, [pc, #352]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4a57      	ldr	r2, [pc, #348]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	f023 0304 	bic.w	r3, r3, #4
 80029cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d015      	beq.n	8002a02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fd35 	bl	8001444 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fe fd31 	bl	8001444 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0b1      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ee      	beq.n	80029de <HAL_RCC_OscConfig+0x37e>
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7fe fd1f 	bl	8001444 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe fd1b 	bl	8001444 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e09b      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	4b40      	ldr	r3, [pc, #256]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ee      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	4b3c      	ldr	r3, [pc, #240]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a3b      	ldr	r2, [pc, #236]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8087 	beq.w	8002b56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a48:	4b36      	ldr	r3, [pc, #216]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d061      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d146      	bne.n	8002aea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	4b33      	ldr	r3, [pc, #204]	@ (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe fcef 	bl	8001444 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fe fceb 	bl	8001444 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e06d      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7c:	4b29      	ldr	r3, [pc, #164]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a92:	4b24      	ldr	r3, [pc, #144]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4921      	ldr	r1, [pc, #132]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a19      	ldr	r1, [r3, #32]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	491b      	ldr	r1, [pc, #108]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fcbf 	bl	8001444 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fcbb 	bl	8001444 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e03d      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x46a>
 8002ae8:	e035      	b.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fca8 	bl	8001444 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fca4 	bl	8001444 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e026      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0a:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x498>
 8002b16:	e01e      	b.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e019      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_RCC_OscConfig+0x500>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0d0      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b6a      	ldr	r3, [pc, #424]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d910      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b67      	ldr	r3, [pc, #412]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4965      	ldr	r1, [pc, #404]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b63      	ldr	r3, [pc, #396]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0b8      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc0:	4b59      	ldr	r3, [pc, #356]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a58      	ldr	r2, [pc, #352]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd8:	4b53      	ldr	r3, [pc, #332]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002be2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b50      	ldr	r3, [pc, #320]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	494d      	ldr	r1, [pc, #308]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d040      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d115      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b41      	ldr	r3, [pc, #260]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e073      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3d      	ldr	r3, [pc, #244]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06b      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b39      	ldr	r3, [pc, #228]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4936      	ldr	r1, [pc, #216]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fbf6 	bl	8001444 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fe fbf2 	bl	8001444 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e053      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b27      	ldr	r3, [pc, #156]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d210      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b24      	ldr	r3, [pc, #144]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	4922      	ldr	r1, [pc, #136]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b20      	ldr	r3, [pc, #128]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e032      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc0:	4b19      	ldr	r3, [pc, #100]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4916      	ldr	r1, [pc, #88]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cde:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	490e      	ldr	r1, [pc, #56]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cf2:	f000 f821 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	490a      	ldr	r1, [pc, #40]	@ (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	5ccb      	ldrb	r3, [r1, r3]
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	4a09      	ldr	r2, [pc, #36]	@ (8002d30 <HAL_RCC_ClockConfig+0x1cc>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_RCC_ClockConfig+0x1d0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fb54 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40022000 	.word	0x40022000
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08003f98 	.word	0x08003f98
 8002d30:	20000004 	.word	0x20000004
 8002d34:	20000008 	.word	0x20000008

08002d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d52:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d002      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x30>
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_GetSysClockFreq+0x36>
 8002d66:	e027      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d68:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d6a:	613b      	str	r3, [r7, #16]
      break;
 8002d6c:	e027      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	0c9b      	lsrs	r3, r3, #18
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	4a17      	ldr	r2, [pc, #92]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d78:	5cd3      	ldrb	r3, [r2, r3]
 8002d7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d86:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	0c5b      	lsrs	r3, r3, #17
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	4a11      	ldr	r2, [pc, #68]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d9a:	fb03 f202 	mul.w	r2, r3, r2
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e004      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a0c      	ldr	r2, [pc, #48]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	613b      	str	r3, [r7, #16]
      break;
 8002db6:	e002      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dba:	613b      	str	r3, [r7, #16]
      break;
 8002dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dbe:	693b      	ldr	r3, [r7, #16]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	007a1200 	.word	0x007a1200
 8002dd4:	08003fa8 	.word	0x08003fa8
 8002dd8:	08003fb8 	.word	0x08003fb8
 8002ddc:	003d0900 	.word	0x003d0900

08002de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002de8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <RCC_Delay+0x34>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0a      	ldr	r2, [pc, #40]	@ (8002e18 <RCC_Delay+0x38>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0a5b      	lsrs	r3, r3, #9
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dfc:	bf00      	nop
  }
  while (Delay --);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e5a      	subs	r2, r3, #1
 8002e02:	60fa      	str	r2, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f9      	bne.n	8002dfc <RCC_Delay+0x1c>
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000004 	.word	0x20000004
 8002e18:	10624dd3 	.word	0x10624dd3

08002e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e041      	b.n	8002eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe f9a8 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 fcfe 	bl	800385c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e041      	b.n	8002f50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f839 	bl	8002f58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4610      	mov	r0, r2
 8002efa:	f000 fcaf 	bl	800385c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d109      	bne.n	8002f90 <HAL_TIM_PWM_Start+0x24>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	bf14      	ite	ne
 8002f88:	2301      	movne	r3, #1
 8002f8a:	2300      	moveq	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e022      	b.n	8002fd6 <HAL_TIM_PWM_Start+0x6a>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d109      	bne.n	8002faa <HAL_TIM_PWM_Start+0x3e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	bf14      	ite	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	2300      	moveq	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	e015      	b.n	8002fd6 <HAL_TIM_PWM_Start+0x6a>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d109      	bne.n	8002fc4 <HAL_TIM_PWM_Start+0x58>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	bf14      	ite	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	2300      	moveq	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e008      	b.n	8002fd6 <HAL_TIM_PWM_Start+0x6a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	bf14      	ite	ne
 8002fd0:	2301      	movne	r3, #1
 8002fd2:	2300      	moveq	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e05e      	b.n	800309c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d104      	bne.n	8002fee <HAL_TIM_PWM_Start+0x82>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fec:	e013      	b.n	8003016 <HAL_TIM_PWM_Start+0xaa>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_PWM_Start+0x92>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ffc:	e00b      	b.n	8003016 <HAL_TIM_PWM_Start+0xaa>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d104      	bne.n	800300e <HAL_TIM_PWM_Start+0xa2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800300c:	e003      	b.n	8003016 <HAL_TIM_PWM_Start+0xaa>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2201      	movs	r2, #1
 800301c:	6839      	ldr	r1, [r7, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fea8 	bl	8003d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1e      	ldr	r2, [pc, #120]	@ (80030a4 <HAL_TIM_PWM_Start+0x138>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d107      	bne.n	800303e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800303c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a18      	ldr	r2, [pc, #96]	@ (80030a4 <HAL_TIM_PWM_Start+0x138>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00e      	beq.n	8003066 <HAL_TIM_PWM_Start+0xfa>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003050:	d009      	beq.n	8003066 <HAL_TIM_PWM_Start+0xfa>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a14      	ldr	r2, [pc, #80]	@ (80030a8 <HAL_TIM_PWM_Start+0x13c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_TIM_PWM_Start+0xfa>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a12      	ldr	r2, [pc, #72]	@ (80030ac <HAL_TIM_PWM_Start+0x140>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d111      	bne.n	800308a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b06      	cmp	r3, #6
 8003076:	d010      	beq.n	800309a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003088:	e007      	b.n	800309a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40000800 	.word	0x40000800

080030b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e093      	b.n	80031ec <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fe f879 	bl	80011d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030f4:	f023 0307 	bic.w	r3, r3, #7
 80030f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3304      	adds	r3, #4
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f000 fba9 	bl	800385c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	4313      	orrs	r3, r2
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003150:	f023 030c 	bic.w	r3, r3, #12
 8003154:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800315c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	4313      	orrs	r3, r2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	011a      	lsls	r2, r3, #4
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	031b      	lsls	r3, r3, #12
 8003180:	4313      	orrs	r3, r2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800318e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	4313      	orrs	r3, r2
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003204:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800320c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003214:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800321c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d110      	bne.n	8003246 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d102      	bne.n	8003230 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800322a:	7b7b      	ldrb	r3, [r7, #13]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d001      	beq.n	8003234 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e069      	b.n	8003308 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003244:	e031      	b.n	80032aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d110      	bne.n	800326e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800324c:	7bbb      	ldrb	r3, [r7, #14]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003252:	7b3b      	ldrb	r3, [r7, #12]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d001      	beq.n	800325c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e055      	b.n	8003308 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800326c:	e01d      	b.n	80032aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d108      	bne.n	8003286 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003274:	7bbb      	ldrb	r3, [r7, #14]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800327a:	7b7b      	ldrb	r3, [r7, #13]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d102      	bne.n	8003286 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003280:	7b3b      	ldrb	r3, [r7, #12]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d001      	beq.n	800328a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e03e      	b.n	8003308 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_TIM_Encoder_Start+0xc4>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d008      	beq.n	80032c8 <HAL_TIM_Encoder_Start+0xd4>
 80032b6:	e00f      	b.n	80032d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2201      	movs	r2, #1
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fd57 	bl	8003d74 <TIM_CCxChannelCmd>
      break;
 80032c6:	e016      	b.n	80032f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2201      	movs	r2, #1
 80032ce:	2104      	movs	r1, #4
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fd4f 	bl	8003d74 <TIM_CCxChannelCmd>
      break;
 80032d6:	e00e      	b.n	80032f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2201      	movs	r2, #1
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fd47 	bl	8003d74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2201      	movs	r2, #1
 80032ec:	2104      	movs	r1, #4
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fd40 	bl	8003d74 <TIM_CCxChannelCmd>
      break;
 80032f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0202 	mvn.w	r2, #2
 8003344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa63 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fa56 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fa65 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0204 	mvn.w	r2, #4
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa3d 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa30 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fa3f 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0208 	mvn.w	r2, #8
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2204      	movs	r2, #4
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fa17 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa0a 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fa19 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d020      	beq.n	8003458 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01b      	beq.n	8003458 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0210 	mvn.w	r2, #16
 8003428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2208      	movs	r2, #8
 800342e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9f1 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9e4 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f9f3 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00c      	beq.n	800347c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0201 	mvn.w	r2, #1
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9c3 	bl	8003802 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fcf5 	bl	8003e8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f9c3 	bl	800384a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00c      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0220 	mvn.w	r2, #32
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fcc8 	bl	8003e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800350a:	2302      	movs	r3, #2
 800350c:	e0ae      	b.n	800366c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	f200 809f 	bhi.w	800365c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800351e:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003559 	.word	0x08003559
 8003528:	0800365d 	.word	0x0800365d
 800352c:	0800365d 	.word	0x0800365d
 8003530:	0800365d 	.word	0x0800365d
 8003534:	08003599 	.word	0x08003599
 8003538:	0800365d 	.word	0x0800365d
 800353c:	0800365d 	.word	0x0800365d
 8003540:	0800365d 	.word	0x0800365d
 8003544:	080035db 	.word	0x080035db
 8003548:	0800365d 	.word	0x0800365d
 800354c:	0800365d 	.word	0x0800365d
 8003550:	0800365d 	.word	0x0800365d
 8003554:	0800361b 	.word	0x0800361b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 f9ea 	bl	8003938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0208 	orr.w	r2, r2, #8
 8003572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0204 	bic.w	r2, r2, #4
 8003582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6999      	ldr	r1, [r3, #24]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	619a      	str	r2, [r3, #24]
      break;
 8003596:	e064      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fa30 	bl	8003a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6999      	ldr	r1, [r3, #24]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	021a      	lsls	r2, r3, #8
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	619a      	str	r2, [r3, #24]
      break;
 80035d8:	e043      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa79 	bl	8003ad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0208 	orr.w	r2, r2, #8
 80035f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0204 	bic.w	r2, r2, #4
 8003604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69d9      	ldr	r1, [r3, #28]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	61da      	str	r2, [r3, #28]
      break;
 8003618:	e023      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fac3 	bl	8003bac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69d9      	ldr	r1, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	021a      	lsls	r2, r3, #8
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	61da      	str	r2, [r3, #28]
      break;
 800365a:	e002      	b.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
      break;
 8003660:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIM_ConfigClockSource+0x1c>
 800368c:	2302      	movs	r3, #2
 800368e:	e0b4      	b.n	80037fa <HAL_TIM_ConfigClockSource+0x186>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c8:	d03e      	beq.n	8003748 <HAL_TIM_ConfigClockSource+0xd4>
 80036ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ce:	f200 8087 	bhi.w	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d6:	f000 8086 	beq.w	80037e6 <HAL_TIM_ConfigClockSource+0x172>
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036de:	d87f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b70      	cmp	r3, #112	@ 0x70
 80036e2:	d01a      	beq.n	800371a <HAL_TIM_ConfigClockSource+0xa6>
 80036e4:	2b70      	cmp	r3, #112	@ 0x70
 80036e6:	d87b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b60      	cmp	r3, #96	@ 0x60
 80036ea:	d050      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x11a>
 80036ec:	2b60      	cmp	r3, #96	@ 0x60
 80036ee:	d877      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b50      	cmp	r3, #80	@ 0x50
 80036f2:	d03c      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xfa>
 80036f4:	2b50      	cmp	r3, #80	@ 0x50
 80036f6:	d873      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b40      	cmp	r3, #64	@ 0x40
 80036fa:	d058      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x13a>
 80036fc:	2b40      	cmp	r3, #64	@ 0x40
 80036fe:	d86f      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b30      	cmp	r3, #48	@ 0x30
 8003702:	d064      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b30      	cmp	r3, #48	@ 0x30
 8003706:	d86b      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b20      	cmp	r3, #32
 800370a:	d060      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d867      	bhi.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05c      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003714:	2b10      	cmp	r3, #16
 8003716:	d05a      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	e062      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800372a:	f000 fb04 	bl	8003d36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800373c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	609a      	str	r2, [r3, #8]
      break;
 8003746:	e04f      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003758:	f000 faed 	bl	8003d36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800376a:	609a      	str	r2, [r3, #8]
      break;
 800376c:	e03c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800377a:	461a      	mov	r2, r3
 800377c:	f000 fa64 	bl	8003c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2150      	movs	r1, #80	@ 0x50
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fabb 	bl	8003d02 <TIM_ITRx_SetConfig>
      break;
 800378c:	e02c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800379a:	461a      	mov	r2, r3
 800379c:	f000 fa82 	bl	8003ca4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2160      	movs	r1, #96	@ 0x60
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 faab 	bl	8003d02 <TIM_ITRx_SetConfig>
      break;
 80037ac:	e01c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fa44 	bl	8003c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2140      	movs	r1, #64	@ 0x40
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fa9b 	bl	8003d02 <TIM_ITRx_SetConfig>
      break;
 80037cc:	e00c      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 fa92 	bl	8003d02 <TIM_ITRx_SetConfig>
      break;
 80037de:	e003      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e000      	b.n	80037e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a2f      	ldr	r2, [pc, #188]	@ (800392c <TIM_Base_SetConfig+0xd0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00b      	beq.n	800388c <TIM_Base_SetConfig+0x30>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387a:	d007      	beq.n	800388c <TIM_Base_SetConfig+0x30>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a2c      	ldr	r2, [pc, #176]	@ (8003930 <TIM_Base_SetConfig+0xd4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_Base_SetConfig+0x30>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a2b      	ldr	r2, [pc, #172]	@ (8003934 <TIM_Base_SetConfig+0xd8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d108      	bne.n	800389e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a22      	ldr	r2, [pc, #136]	@ (800392c <TIM_Base_SetConfig+0xd0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00b      	beq.n	80038be <TIM_Base_SetConfig+0x62>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ac:	d007      	beq.n	80038be <TIM_Base_SetConfig+0x62>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003930 <TIM_Base_SetConfig+0xd4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <TIM_Base_SetConfig+0x62>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003934 <TIM_Base_SetConfig+0xd8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d108      	bne.n	80038d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a0d      	ldr	r2, [pc, #52]	@ (800392c <TIM_Base_SetConfig+0xd0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d103      	bne.n	8003904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	611a      	str	r2, [r3, #16]
  }
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800

08003938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f023 0201 	bic.w	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 0302 	bic.w	r3, r3, #2
 8003980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a00 <TIM_OC1_SetConfig+0xc8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d10c      	bne.n	80039ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f023 0308 	bic.w	r3, r3, #8
 800399a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f023 0304 	bic.w	r3, r3, #4
 80039ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a13      	ldr	r2, [pc, #76]	@ (8003a00 <TIM_OC1_SetConfig+0xc8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d111      	bne.n	80039da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	621a      	str	r2, [r3, #32]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40012c00 	.word	0x40012c00

08003a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f023 0210 	bic.w	r2, r3, #16
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0320 	bic.w	r3, r3, #32
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad4 <TIM_OC2_SetConfig+0xd0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d10d      	bne.n	8003a80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a14      	ldr	r2, [pc, #80]	@ (8003ad4 <TIM_OC2_SetConfig+0xd0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d113      	bne.n	8003ab0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	621a      	str	r2, [r3, #32]
}
 8003aca:	bf00      	nop
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	40012c00 	.word	0x40012c00

08003ad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba8 <TIM_OC3_SetConfig+0xd0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d10d      	bne.n	8003b52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a14      	ldr	r2, [pc, #80]	@ (8003ba8 <TIM_OC3_SetConfig+0xd0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d113      	bne.n	8003b82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	621a      	str	r2, [r3, #32]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40012c00 	.word	0x40012c00

08003bac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	031b      	lsls	r3, r3, #12
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a0f      	ldr	r2, [pc, #60]	@ (8003c44 <TIM_OC4_SetConfig+0x98>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d109      	bne.n	8003c20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	019b      	lsls	r3, r3, #6
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	40012c00 	.word	0x40012c00

08003c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f023 0201 	bic.w	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f023 030a 	bic.w	r3, r3, #10
 8003c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	621a      	str	r2, [r3, #32]
}
 8003c9a:	bf00      	nop
 8003c9c:	371c      	adds	r7, #28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	f023 0210 	bic.w	r2, r3, #16
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	031b      	lsls	r3, r3, #12
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	621a      	str	r2, [r3, #32]
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f043 0307 	orr.w	r3, r3, #7
 8003d24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	609a      	str	r2, [r3, #8]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr

08003d36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b087      	sub	sp, #28
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	021a      	lsls	r2, r3, #8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	609a      	str	r2, [r3, #8]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2201      	movs	r2, #1
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	401a      	ands	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a1a      	ldr	r2, [r3, #32]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	431a      	orrs	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e046      	b.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a16      	ldr	r2, [pc, #88]	@ (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00e      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e20:	d009      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a12      	ldr	r2, [pc, #72]	@ (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a10      	ldr	r2, [pc, #64]	@ (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10c      	bne.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800

08003e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <memset>:
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4402      	add	r2, r0
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <memset+0xa>
 8003ea4:	4770      	bx	lr
 8003ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eaa:	e7f9      	b.n	8003ea0 <memset+0x4>

08003eac <__libc_init_array>:
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	2600      	movs	r6, #0
 8003eb0:	4d0c      	ldr	r5, [pc, #48]	@ (8003ee4 <__libc_init_array+0x38>)
 8003eb2:	4c0d      	ldr	r4, [pc, #52]	@ (8003ee8 <__libc_init_array+0x3c>)
 8003eb4:	1b64      	subs	r4, r4, r5
 8003eb6:	10a4      	asrs	r4, r4, #2
 8003eb8:	42a6      	cmp	r6, r4
 8003eba:	d109      	bne.n	8003ed0 <__libc_init_array+0x24>
 8003ebc:	f000 f860 	bl	8003f80 <_init>
 8003ec0:	2600      	movs	r6, #0
 8003ec2:	4d0a      	ldr	r5, [pc, #40]	@ (8003eec <__libc_init_array+0x40>)
 8003ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8003ef0 <__libc_init_array+0x44>)
 8003ec6:	1b64      	subs	r4, r4, r5
 8003ec8:	10a4      	asrs	r4, r4, #2
 8003eca:	42a6      	cmp	r6, r4
 8003ecc:	d105      	bne.n	8003eda <__libc_init_array+0x2e>
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed4:	4798      	blx	r3
 8003ed6:	3601      	adds	r6, #1
 8003ed8:	e7ee      	b.n	8003eb8 <__libc_init_array+0xc>
 8003eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ede:	4798      	blx	r3
 8003ee0:	3601      	adds	r6, #1
 8003ee2:	e7f2      	b.n	8003eca <__libc_init_array+0x1e>
 8003ee4:	08003fbc 	.word	0x08003fbc
 8003ee8:	08003fbc 	.word	0x08003fbc
 8003eec:	08003fbc 	.word	0x08003fbc
 8003ef0:	08003fc0 	.word	0x08003fc0

08003ef4 <round>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003efa:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8003efe:	2a13      	cmp	r2, #19
 8003f00:	4604      	mov	r4, r0
 8003f02:	460d      	mov	r5, r1
 8003f04:	460b      	mov	r3, r1
 8003f06:	dc1a      	bgt.n	8003f3e <round+0x4a>
 8003f08:	2a00      	cmp	r2, #0
 8003f0a:	da0b      	bge.n	8003f24 <round+0x30>
 8003f0c:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8003f10:	3201      	adds	r2, #1
 8003f12:	bf04      	itt	eq
 8003f14:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8003f18:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	461d      	mov	r5, r3
 8003f20:	4614      	mov	r4, r2
 8003f22:	e016      	b.n	8003f52 <round+0x5e>
 8003f24:	4815      	ldr	r0, [pc, #84]	@ (8003f7c <round+0x88>)
 8003f26:	4110      	asrs	r0, r2
 8003f28:	4001      	ands	r1, r0
 8003f2a:	4321      	orrs	r1, r4
 8003f2c:	d011      	beq.n	8003f52 <round+0x5e>
 8003f2e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8003f32:	fa41 f202 	asr.w	r2, r1, r2
 8003f36:	4413      	add	r3, r2
 8003f38:	ea23 0300 	bic.w	r3, r3, r0
 8003f3c:	e7ee      	b.n	8003f1c <round+0x28>
 8003f3e:	2a33      	cmp	r2, #51	@ 0x33
 8003f40:	dd0a      	ble.n	8003f58 <round+0x64>
 8003f42:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003f46:	d104      	bne.n	8003f52 <round+0x5e>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	f7fc f907 	bl	800015c <__adddf3>
 8003f4e:	4604      	mov	r4, r0
 8003f50:	460d      	mov	r5, r1
 8003f52:	4620      	mov	r0, r4
 8003f54:	4629      	mov	r1, r5
 8003f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8003f60:	40f8      	lsrs	r0, r7
 8003f62:	4220      	tst	r0, r4
 8003f64:	d0f5      	beq.n	8003f52 <round+0x5e>
 8003f66:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	408a      	lsls	r2, r1
 8003f6e:	1912      	adds	r2, r2, r4
 8003f70:	bf28      	it	cs
 8003f72:	3301      	addcs	r3, #1
 8003f74:	ea22 0200 	bic.w	r2, r2, r0
 8003f78:	e7d1      	b.n	8003f1e <round+0x2a>
 8003f7a:	bf00      	nop
 8003f7c:	000fffff 	.word	0x000fffff

08003f80 <_init>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	bf00      	nop
 8003f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f86:	bc08      	pop	{r3}
 8003f88:	469e      	mov	lr, r3
 8003f8a:	4770      	bx	lr

08003f8c <_fini>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	bf00      	nop
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr
